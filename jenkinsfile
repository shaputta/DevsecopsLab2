pipeline {
    agent {
        label 'sha-ubuntu-agent'
    }
    environment {
        DOCKERHUB_USER = 'shaputtalab1'
        IMAGE_NAME = 'jenkins-ubuntu-lab'
        SONARQUBE_SERVER = 'sha-sq'
        SONAR_TOKEN = credentials('sha-sonar-token')
    }
    stages {
          stage('Checkout') {
            steps {
                checkout scm
            }
        }

        stage('Install dependencies') {
    steps {
        sh 'pip3 install -r requirements.txt'
    }
}

         stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('sha-sq') {
                    sh '''
                        # Ensure we're in the root where sonar-project.properties exists
                        cd ${WORKSPACE}
                        sonar-scanner \
                          -Dsonar.projectBaseDir=python-app \
                          -Dsonar.login=$SONAR_TOKEN
                    '''
                }
            }
        }

        stage('Clean up image and container') {
            steps {
                script {
               //     sh 'git clone git@github.com:Vishwanathms/t7.14-py-jenkins.git'
                    sh 'docker rm  jenkins_app -f || true'
                    sh 'docker image rmi $DOCKERHUB_USER/$IMAGE_NAME:latest || true'
                }
            }  
        }
        stage('Build Docker Image') {
            steps {
                script {
                    sh 'docker build -t $DOCKERHUB_USER/$IMAGE_NAME:latest python-app'
                }
            }
        }
        stage('Scan Docker Image with Trivy') {
            steps {
                // Scan and save report
                sh '''
                  mkdir -p trivy-reports
                  trivy image --no-progress --exit-code 0 --format table -o trivy-reports/report.txt $DOCKERHUB_USER/$IMAGE_NAME
                  cat trivy-reports/report.txt
                '''
            }
        }

        stage('Archive Trivy Report') {
            steps {
                archiveArtifacts artifacts: 'trivy-reports/report.txt', fingerprint: true
            }
        }
    }
 
    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed.'
        }
    }
}